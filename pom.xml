<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>bzh.fucktheduck.sec</groupId>
	<artifactId>sec</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>pom</packaging>
	<name>sec</name>


	<properties>

		<root.basedir>${basedir}</root.basedir>

		<!-- plugins maven -->
		<maven.surefire.plugin.version>2.18.1</maven.surefire.plugin.version>
		<assembly-plugin.version>2.5.5</assembly-plugin.version>
		<antrun-plugin.version>1.8</antrun-plugin.version>
		<frontend-plugin.version>0.0.24</frontend-plugin.version>
		<resources-plugin.version>2.7</resources-plugin.version>
		<compiler-plugin.version>3.3</compiler-plugin.version>
		<surefire-plugin.version>2.18.1</surefire-plugin.version>
		<versions-plugin.version>2.2</versions-plugin.version>
		<clean-plugin.version>2.6.1</clean-plugin.version>
		<deploy-plugin.version>2.8.2</deploy-plugin.version>
		<install-plugin.version>2.5.2</install-plugin.version>
		<site-plugin.version>3.4</site-plugin.version>
		<dependency-plugin.version>2.5.5</dependency-plugin.version>
		<release-plugin.version>2.5.2</release-plugin.version>
		<build-helper-maven-plugin.version>1.9.1</build-helper-maven-plugin.version>
		<jacoco-plugin.version>0.7.4.201502262128</jacoco-plugin.version>
		<json-schema-validator-plugin.version>1.0-beta-1</json-schema-validator-plugin.version>
		<sonar-plugin.version>2.6</sonar-plugin.version>
		<eclipse-plugin.version>2.10</eclipse-plugin.version>
		<dependency-plugin.version>2.10</dependency-plugin.version>
		<log4j.version>2.5</log4j.version>
		<quartz.version>2.2.3</quartz.version>
		<jacoco.out.file>jacoco-ut.exec</jacoco.out.file>
		<jacoco.out.path>${session.executionRootDirectory}/target</jacoco.out.path>

		<jsf-api.version>2.2.12</jsf-api.version>
		<portlet-api.version>2.0</portlet-api.version>
		<json-api.version>1.0</json-api.version>
		<commons-fileupload.version>1.2.2</commons-fileupload.version>
		<commons-io.version>2.4</commons-io.version>
		<jboss-el.version>2.0.0.GA</jboss-el.version>
		<log.version>0.1.4</log.version>
		<metrics.version>3.1.0</metrics.version>

		<!-- WebServices -->
		<vertx.version>2.1.5</vertx.version>
		<vertx.testtools.version>2.0.3-final</vertx.testtools.version>
		<joda-time-version>2.8.1</joda-time-version>
		<jackson-jaxrs-json-provider.version>2.5.3</jackson-jaxrs-json-provider.version>
		<jsonassert.version>1.2.3</jsonassert.version>
		<json-schema-validator.version>2.2.6</json-schema-validator.version>
		<resteasy-jackson-provider.version>3.0.11.Final</resteasy-jackson-provider.version>
		<resteasy-jaxr.version>3.0.13.Final</resteasy-jaxr.version>
		<apache-http.client>4.5</apache-http.client>
		<json-flattener.version>0.1.0</json-flattener.version>
		<vertx.io>3.2.1</vertx.io>
		<jetty-server.version>9.3.7.v20160115</jetty-server.version>
		<org.glassfish.jersey.version>2.23</org.glassfish.jersey.version>

		<!-- common -->
		<commons-validator.version>1.4.1</commons-validator.version>
		<commons-apache.version>3.4</commons-apache.version>
		<commons-collections4.version>4.0</commons-collections4.version>
		<commons-httpclient.version>3.0.1</commons-httpclient.version>

		<!-- tools -->
		<syslog.version>2.5.2</syslog.version>
		<hystrix.version>1.5.3</hystrix.version>
		<!-- tests plugins maven -->
		<junit.version>4.12</junit.version>

		<!-- sources properties -->
		<src.main.java>src/main/java</src.main.java>
		<src.main.js>src/main/js</src.main.js>
		<src.test.java>src/test/java</src.test.java>
		<src.test.js>src/test/js</src.test.js>

		<!-- Default values -->
		<application.code>sec</application.code>
		<portlet.code>administration</portlet.code>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>


		<surefire.argline />
		<!-- packaging properties -->
		<module.wk.code>${application.code}wk</module.wk.code>
		<module.wk.version>${project.version}</module.wk.version>
		<batch.version>${project.version}</batch.version>



	</properties>

	<modules>
		<module>server</module>
		<module>delivery</module>
		<module>gui</module>
	</modules>

	<dependencyManagement>
		<dependencies>

			<!-- Project dependencies -->

			<dependency>
				<!-- JUnit is a unit testing framework for Java, created by Erich Gamma and Kent Beck. -->
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<!-- Logging -->
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-web</artifactId>
				<version>${log4j.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-core</artifactId>
				<version>${log4j.version}</version>
			</dependency>

			<dependency>
				<!-- The Simple Logging Facade for Java (SLF4J) serves as a simple facade or abstraction 
				for various logging frameworks, such as java.util.logging, logback and log4j.
				SLF4J allows the end-user to plug in the desired logging framework at deployment time. -->
				<groupId>org.slf4j</groupId>
				<artifactId>slf4j-simple</artifactId>
				<version>1.7.21</version>
			</dependency>

			<dependency>
				<groupId>org.apache.logging.log4j</groupId>
				<artifactId>log4j-api</artifactId>
				<version>${log4j.version}</version>
			</dependency>

			<dependency>
				<!-- The Commons HttpClient project is now end of life, and is no longer being developed. 
				It has been replaced by the Apache HttpComponents project in its HttpClient and HttpCore modules, 
				which offer better performance and more flexibility. -->
				<groupId>commons-httpclient</groupId>
				<artifactId>commons-httpclient</artifactId>
				<version>${commons-httpclient.version}</version>
			</dependency>

			<dependency>
				<!-- Peut être non utile : outil de validation de données via fichier de conf XML -->
				<groupId>commons-validator</groupId>
				<artifactId>commons-validator</artifactId>
				<version>${commons-validator.version}</version>
			</dependency>

			<dependency>
				<!-- The Java Collections Framework was a major addition in JDK 1.2. 
				It added many powerful data structures that accelerate development of most significant Java applications.
				Since that time it has become the recognised standard for collection handling in Java -->
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-collections4</artifactId>
				<version>${commons-collections4.version}</version>
			</dependency>

			<dependency>
				<!-- Commons IO is a library of utilities to assist with developing IO functionality.
				There are six main areas included:
				Utility classes - with static methods to perform common tasks
				Input - useful Input Stream and Reader implementations
				Output - useful Output Stream and Writer implementations
				Filters - various implementations of file filters
				Comparators - various implementations of java.util.Comparator for files
				File Monitor - a component for monitoring file system events -->
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>

			<dependency>
				<!-- The standard Java libraries fail to provide enough methods for manipulation of its core classes. 
				Apache Commons Lang provides these extra methods (notably String manipulation methods, 
				basic numerical methods, object reflection, concurrency, creation and serialization and 
				System properties). -->
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-apache.version}</version>
			</dependency>

			<dependency>
				<!-- The Commons HttpClient project is now end of life, and is no longer being developed. 
				It has been replaced by the Apache HttpComponents project in its HttpClient and HttpCore modules, 
				which offer better performance and more flexibility. -->
				<groupId>org.apache.httpcomponents</groupId>
				<artifactId>httpclient</artifactId>
				<version>${apache-http.client}</version>
			</dependency>


			<!-- Tomcat -->
			<dependency>
				<!-- The javax.servlet package contains a number of classes and interfaces that describe and define
 				the contracts between a servlet class and the runtime environment provided for an instance of such a 
				class by a conforming servlet container. -->
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>servlet-api</artifactId>
				<version>3.0.20100224</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<!-- The javax.servlet package contains a number of classes and interfaces that describe and define 
				the contracts between a servlet class and the runtime environment provided for an instance of such a 
				class by a conforming servlet container. -->
				<groupId>tomcat</groupId>
				<artifactId>javax.servlet</artifactId>
				<version>5.1.12</version>
				<scope>provided</scope>
			</dependency>

			<!-- Jersey -->

			<dependency>
				<!-- Jersey provides it’s own API that extend the JAX-RS toolkit with additional features and
 				utilities to further simplify RESTful service and client development. 
				A priori utile pour tout le mapping (anotations) des servlets.-->
				<groupId>org.glassfish.jersey.core</groupId>
				<artifactId>jersey-server</artifactId>
				<version>${org.glassfish.jersey.version}</version>
			</dependency>

			<dependency>
				<groupId>org.glassfish.jersey.containers</groupId>
				<artifactId>jersey-container-servlet-core</artifactId>
				<version>${org.glassfish.jersey.version}</version>
			</dependency>


			<dependency>
			    <groupId>org.glassfish.jersey.media</groupId>
			    <artifactId>jersey-media-json-jackson</artifactId>
				<version>${org.glassfish.jersey.version}</version>
			</dependency>


			<dependency>
				<groupId>org.glassfish.jersey.core</groupId>
				<artifactId>jersey-client</artifactId>
				<version>${org.glassfish.jersey.version}</version>
			</dependency>

			<dependency>
				<groupId>org.glassfish.jersey.media</groupId>
				<artifactId>jersey-media-multipart</artifactId>
				<version>${org.glassfish.jersey.version}</version>
			</dependency>

			<!-- Jackson -->
			<dependency>
				<!-- Core Jackson abstractions, basic JSON streaming API implementation -->
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-core</artifactId>
				<version>${jackson-jaxrs-json-provider.version}</version>
			</dependency>

			<dependency>
				<!--  RESTEasy, the JBoss JAX-RS implementation, 1.x and 2.x has a great client API that 
				helps you to easily consume REST web services in a JAX-RS way.  -->
				<groupId>org.jboss.resteasy</groupId>
				<artifactId>resteasy-client</artifactId>
				<version>${resteasy-jaxr.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-databind</artifactId>
				<version>${jackson-jaxrs-json-provider.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.jaxrs</groupId>
				<artifactId>jackson-jaxrs-json-provider</artifactId>
				<version>${jackson-jaxrs-json-provider.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.core</groupId>
				<artifactId>jackson-annotations</artifactId>
				<version>${jackson-jaxrs-json-provider.version}</version>
			</dependency>

			<dependency>
				<!-- Utile ? -->
				<groupId>com.fasterxml.jackson.datatype</groupId>
				<artifactId>jackson-datatype-joda</artifactId>
				<version>${jackson-jaxrs-json-provider.version}</version>
			</dependency>

			<dependency>
				<groupId>com.fasterxml.jackson.dataformat</groupId>
				<artifactId>jackson-dataformat-csv</artifactId>
				<version>${jackson-jaxrs-json-provider.version}</version>
			</dependency>

			<dependency>
				<!-- Format utilisé dans le transfert des données des requêtes HTTP -->
				<groupId>org.json</groupId>
				<artifactId>json</artifactId>
				<version>20140107</version>
			</dependency>

		</dependencies>
	</dependencyManagement>

	<!-- <repositories>
		<repository>
			<id>sec-local-repo</id>
			<url>file://${root.basedir}/repository/maven</url>
			<layout>default</layout>
		</repository>
		<repository>
			<id>central</id>
			<url>https://repo1.maven.org/maven2</url>
			<releases>
				<enabled>true</enabled>
			</releases>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>sec-local-plugin-repo</id>
			<url>file://${root.basedir}/repository/maven</url>
			<layout>default</layout>
		</pluginRepository>
	</pluginRepositories> -->

	<build>
		<pluginManagement>
			<plugins>
				<!-- Suppression de ce plugin, auparavant utilisé pour générer les .classpath Eclipse car ce dernier
				ne pouvait pas intégrer les projets maven. Aujourd'hui, le plugin m2e prend le relais.
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>${eclipse-plugin.version}</version>
					<configuration>
						<downloadSources>true</downloadSources>
						<downloadJavadocs>true</downloadJavadocs>
						<buildOutputDirectory>${project.basedir}/targetEclipse/classes</buildOutputDirectory>
						<projectNameTemplate>${project.artifactId}</projectNameTemplate>
						<useProjectReferences>true</useProjectReferences>
						<wtpmanifest>false</wtpmanifest>
						<wtpversion>2.0</wtpversion>
						<wtpapplicationxml>true</wtpapplicationxml>
						<wtpContextName>${project.artifactId}</wtpContextName>
					</configuration>
				</plugin> -->

				<!-- Plugin auparavant utilisé pour regrouper la sortie du projet ainsi que ses dépendances, 
				des modules, la documentation du site et d'autres fichiers en une seule archive distribuable.
				Non utile pour nous pour le moment.
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>${assembly-plugin.version}</version>
					<configuration>
						<descriptor>src/assembly/assembly_descriptor.xml</descriptor>
						<appendAssemblyId>false</appendAssemblyId>
					</configuration>
				</plugin> -->
				
				<!-- Peut être un plugin intéressant pour nos montées de version. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>${release-plugin.version}</version>
				</plugin>

				<!-- Pas certain de la nécessité des ce plugin. Maintenant géré nativement par maven. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-clean-plugin</artifactId>
					<version>${clean-plugin.version}</version>
				</plugin>

				<!-- Pas certain de la nécessité des ce plugin. Maintenant géré nativement par maven. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>${deploy-plugin.version}</version>
				</plugin>

				<!-- Pas certain de la nécessité des ce plugin. Maintenant géré nativement par maven. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-install-plugin</artifactId>
					<version>${install-plugin.version}</version>
				</plugin>

				<!-- Pas certain de la nécessité des ce plugin. Maintenant géré nativement par maven. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-site-plugin</artifactId>
					<version>${site-plugin.version}</version>
				</plugin>

				<!-- Pas certain de la nécessité des ce plugin. Maintenant géré nativement par maven. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>${antrun-plugin.version}</version>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>${compiler-plugin.version}</version>
					<configuration>
						<encoding>${project.build.sourceEncoding}</encoding>
						<source>${maven.compiler.source}</source>
						<target>${maven.compiler.target}</target>
					</configuration>
				</plugin>

				<plugin>
					<groupId>com.collaborne.maven</groupId>
					<artifactId>json-schema-validator-maven-plugin</artifactId>
					<version>${json-schema-validator-plugin.version}</version>
				</plugin>

				<!-- Utilisé notamment pour corriger les problèmes maven rencontrés par Eclipse. 
				Peut aussi être utilisé pour ajouter des sources générées, ... -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>build-helper-maven-plugin</artifactId>
					<version>${build-helper-maven-plugin.version}</version>
				</plugin>

				<plugin>
					<!-- The Surefire Plugin is used during the test phase of the build lifecycle 
					to execute the unit tests of an application. It generates reports in two different 
					file formats: Plain text files (*.txt) ; XML files (*.xml) -->
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>${maven.surefire.plugin.version}</version>
					<configuration>
						<runOrder>alphabetical</runOrder>
					</configuration>
				</plugin>

				<!-- Couverture de code des tests JUnit. Est-ce vraiment indispensable pour le moment ? -->
				<plugin>
					<groupId>org.jacoco</groupId>
					<artifactId>jacoco-maven-plugin</artifactId>
					<version>${jacoco-plugin.version}</version>
					<executions>
						<execution>
							<id>pre-unit-test</id>
							<goals>
								<goal>prepare-agent</goal>
							</goals>
							<configuration>
								<propertyName>jacocoAgent</propertyName>
								<destFile>${jacoco.out.path}/${jacoco.out.file}</destFile>
								<append>true</append>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.
				Elément ajouté par Ecplise pour supprimer les erreurs de couverture de lifecycle maven non maitrisées par Eclipse.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.jacoco</groupId>
										<artifactId>
											jacoco-maven-plugin
										</artifactId>
										<versionRange>
											[0.7.4.201502262128,)
										</versionRange>
										<goals>
											<goal>prepare-agent</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											build-helper-maven-plugin
										</artifactId>
										<versionRange>
											[1.9.1,)
										</versionRange>
										<goals>
											<goal>
												reserve-network-port
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

	</build>



	<reporting>
		<plugins>
			<plugin>
				<!-- The Versions Plugin is used when you want to manage the versions of artifacts in a project's POM. -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<version>${maven-versions-plugin.version}</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>dependency-updates-report</report>
							<report>plugin-updates-report</report>
							<report>property-updates-report</report>
						</reports>
					</reportSet>
				</reportSets>
				<configuration>
					<rulesUri>http://site.trajano.net/coding-standards/maven-version-rules.xml</rulesUri>
				</configuration>
			</plugin>
			<!-- The JXR Plugin produces a cross-reference of the project's sources. 
			The generated reports make it easier for the user to reference or find specific lines of code. 
			It is also handy when used with the PMD Plugin for referencing errors found in the code. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jxr-plugin</artifactId>
				<version>2.5</version>
			</plugin>
		</plugins>
	</reporting>

</project>
